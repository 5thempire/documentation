{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview A reference for Python based projects.","title":"Overview"},{"location":"#overview","text":"A reference for Python based projects.","title":"Overview"},{"location":"python_virtual_environment/","text":"Python Virtual Environment The virtual environment ecosystem is composed by 3 different parts: Python version Depending on the system you're using, a particular Python version can be installed via that system package manager or via pyenv . Virtual Environment A virtual environment is a Python environment such that the Python interpreter, libraries and scripts installed into it are isolated from those installed in other virtual environments, and (by default) any libraries installed in a \u201csystem\u201d Python, i.e., one which is installed as part of your operating system. docs.python.org Dependency management A list of all the Python dependencies for a given project.Typically called requirements.txt , but can also take a more complex form where there's a distinction between which dependencies belong to production and which belong to development/testing. Python version The most popular option is pyenv , even when a particular version is available in the OS package manager pyenv Check the documentation at https://github.com/pyenv/pyenv . Allows to specify a particular Python version to be used in a virtual environment. List all Python versions available to pyenv pyenv install -l Choose a version and install it pyenv install 3.10.4 Versions are available under are available under ~/.pyenv/versions/ Global The global command sets the global Python version, which is useful for ensuring a particular Python version by default. If you wanted to use 3.7.10 by default, then you could run this: pyenv global 3.7.10 This command sets the ~/.pyenv/version to 3.7.10. Local The local command is used to set an application-specific Python version pyenv local 3.10.4 This command creates a .python-version file in your current directory. If you have pyenv active in your environment, this file will automatically activate this version for you. Virtual Environment venv The most simple is venv using the Python system version python -m venv simple-venv activate deactivate source simple-venv/bin/activate deactivate Pyenv + Virtualenv Pyenv supports the creation of a virtualenv tied to a particular Python version. pyenv virtualenv 3.10.4 sample-virtual-env activate deactivate source ~/.pyenv/versions/sample-virtual-env/bin/activate deactivate pyenv local sample-virtual-env deactivate Poetry This is a packaging and dependency management all in one, which means: it supports builds you can publish your package to both public and private repositories includes a virtualenv https://python-poetry.org/docs/basic-usage/#using-your-virtual-environment . Check the documentation available at https://python-poetry.org/docs/ , the installation should be system-wide, even though it can be installed on a particular environment. poetry new poetry-demo This will create the poetry-demo directory with the following content. poetry-demo \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.rst \u251c\u2500\u2500 poetry_demo \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_poetry_demo.py activate deactivate poetry shell deactivate Poetry + pyenv To use poetry with a particular Python version, that version only needs to be available in the system. In this case, we're using a Python version provided by pyenv . For further documentation please check https://python-poetry.org/docs/managing-environments/#switching-between-environments cd poetry-demo poetry env use ~/.pyenv/versions/3.10.4/bin/python Dependency Management pip pipenv Poetry search pip search pipenv search poetry search install pip install pipenv install poetry add install dev pipenv install --dev poetry add --dev uninstall pip uninstall pipenv uninstall poetry remove uninstall dev pipenv uninstall --dev poetry remove --dev list packages pip list pip list poetry show build poetry build publish poetry publish Pip https://pip.pypa.io/en/stable/ Pip is the package installer for Python. You can use it to install packages from the Python Package Index and other indexes. pipenv https://pipenv.pypa.io/en/latest/ Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world. It automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your Pipfile as you install/uninstall packages. It also generates the ever-important Pipfile.lock, which is used to produce deterministic builds. Pipenv uses Pipfile and Pipfile.lock to separate abstract dependency declarations from the last tested combination. Poetry https://python-poetry.org/ Poetry also allows a version lock similarly to Pipenv, in this case it's called Poetry.lock pipx Pipx allows the installation and execution of Python applications in isolated environments.","title":"Python Virtual Environment"},{"location":"python_virtual_environment/#python-virtual-environment","text":"The virtual environment ecosystem is composed by 3 different parts: Python version Depending on the system you're using, a particular Python version can be installed via that system package manager or via pyenv . Virtual Environment A virtual environment is a Python environment such that the Python interpreter, libraries and scripts installed into it are isolated from those installed in other virtual environments, and (by default) any libraries installed in a \u201csystem\u201d Python, i.e., one which is installed as part of your operating system. docs.python.org Dependency management A list of all the Python dependencies for a given project.Typically called requirements.txt , but can also take a more complex form where there's a distinction between which dependencies belong to production and which belong to development/testing.","title":"Python Virtual Environment"},{"location":"python_virtual_environment/#python-version","text":"The most popular option is pyenv , even when a particular version is available in the OS package manager","title":"Python version"},{"location":"python_virtual_environment/#pyenv","text":"Check the documentation at https://github.com/pyenv/pyenv . Allows to specify a particular Python version to be used in a virtual environment. List all Python versions available to pyenv pyenv install -l Choose a version and install it pyenv install 3.10.4 Versions are available under are available under ~/.pyenv/versions/","title":"pyenv"},{"location":"python_virtual_environment/#global","text":"The global command sets the global Python version, which is useful for ensuring a particular Python version by default. If you wanted to use 3.7.10 by default, then you could run this: pyenv global 3.7.10 This command sets the ~/.pyenv/version to 3.7.10.","title":"Global"},{"location":"python_virtual_environment/#local","text":"The local command is used to set an application-specific Python version pyenv local 3.10.4 This command creates a .python-version file in your current directory. If you have pyenv active in your environment, this file will automatically activate this version for you.","title":"Local"},{"location":"python_virtual_environment/#virtual-environment","text":"","title":"Virtual Environment"},{"location":"python_virtual_environment/#venv","text":"The most simple is venv using the Python system version python -m venv simple-venv activate deactivate source simple-venv/bin/activate deactivate","title":"venv"},{"location":"python_virtual_environment/#pyenv-virtualenv","text":"Pyenv supports the creation of a virtualenv tied to a particular Python version. pyenv virtualenv 3.10.4 sample-virtual-env activate deactivate source ~/.pyenv/versions/sample-virtual-env/bin/activate deactivate pyenv local sample-virtual-env deactivate","title":"Pyenv + Virtualenv"},{"location":"python_virtual_environment/#poetry","text":"This is a packaging and dependency management all in one, which means: it supports builds you can publish your package to both public and private repositories includes a virtualenv https://python-poetry.org/docs/basic-usage/#using-your-virtual-environment . Check the documentation available at https://python-poetry.org/docs/ , the installation should be system-wide, even though it can be installed on a particular environment. poetry new poetry-demo This will create the poetry-demo directory with the following content. poetry-demo \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.rst \u251c\u2500\u2500 poetry_demo \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_poetry_demo.py activate deactivate poetry shell deactivate","title":"Poetry"},{"location":"python_virtual_environment/#poetry-pyenv","text":"To use poetry with a particular Python version, that version only needs to be available in the system. In this case, we're using a Python version provided by pyenv . For further documentation please check https://python-poetry.org/docs/managing-environments/#switching-between-environments cd poetry-demo poetry env use ~/.pyenv/versions/3.10.4/bin/python","title":"Poetry + pyenv"},{"location":"python_virtual_environment/#dependency-management","text":"pip pipenv Poetry search pip search pipenv search poetry search install pip install pipenv install poetry add install dev pipenv install --dev poetry add --dev uninstall pip uninstall pipenv uninstall poetry remove uninstall dev pipenv uninstall --dev poetry remove --dev list packages pip list pip list poetry show build poetry build publish poetry publish","title":"Dependency Management"},{"location":"python_virtual_environment/#pip","text":"https://pip.pypa.io/en/stable/ Pip is the package installer for Python. You can use it to install packages from the Python Package Index and other indexes.","title":"Pip"},{"location":"python_virtual_environment/#pipenv","text":"https://pipenv.pypa.io/en/latest/ Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world. It automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your Pipfile as you install/uninstall packages. It also generates the ever-important Pipfile.lock, which is used to produce deterministic builds. Pipenv uses Pipfile and Pipfile.lock to separate abstract dependency declarations from the last tested combination.","title":"pipenv"},{"location":"python_virtual_environment/#poetry_1","text":"https://python-poetry.org/ Poetry also allows a version lock similarly to Pipenv, in this case it's called Poetry.lock","title":"Poetry"},{"location":"python_virtual_environment/#pipx","text":"Pipx allows the installation and execution of Python applications in isolated environments.","title":"pipx"}]}